--- es8316-original.c	2018-01-13 02:41:53.562507029 +0300
+++ es8316-patched.c	2018-01-11 12:32:01.000000000 +0300
@@ -10,6 +10,8 @@
  * published by the Free Software Foundation.
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/acpi.h>
 #include <linux/delay.h>
@@ -23,6 +25,9 @@
 #include <sound/tlv.h>
 #include "es8316.h"
 
+#include <linux/dmi.h>
+#include <linux/gpio/consumer.h>
+
 /* In slave mode at single speed, the codec is documented as accepting 5
  * MCLK/LRCK ratios, but we also add ratio 400, which is commonly used on
  * Intel Cherry Trail platforms (19.2MHz MCLK, 48kHz LRCK).
@@ -36,6 +41,11 @@
 	unsigned int sysclk;
 	unsigned int allowed_rates[NR_SUPPORTED_MCLK_LRCK_RATIOS];
 	struct snd_pcm_hw_constraint_list sysclk_constraints;
+
+	unsigned int hp_irq;
+	bool hpdet_inv_flag;
+	struct gpio_desc *gpiod_spken;
+	struct gpio_desc *gpiod_hpint;
 };
 
 /*
@@ -502,7 +512,7 @@
 #define ES8316_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE | \
 			SNDRV_PCM_FMTBIT_S24_LE)
 
-static const struct snd_soc_dai_ops es8316_ops = {
+static struct snd_soc_dai_ops es8316_ops = {
 	.startup = es8316_pcm_startup,
 	.hw_params = es8316_pcm_hw_params,
 	.set_fmt = es8316_set_dai_fmt,
@@ -530,8 +540,29 @@
 	.symmetric_rates = 1,
 };
 
+//FIXME: do proper impl via alsa-jack in machine driver
+static void es8316_sync_spk_status(struct snd_soc_codec *codec)
+{
+	struct es8316_priv *es8316 = snd_soc_codec_get_drvdata(codec);
+	unsigned int data;
+
+	data = snd_soc_read(codec, ES8316_GPIO_FLAG);
+	dev_info(codec->dev, "Status: %u / HPIns %u / GMShrt %u / OUT: %d\n", data, !!(data & BIT(2)), !!(data & BIT(1)), !(!!(data & BIT(2)) ^ es8316->hpdet_inv_flag));
+
+	gpiod_set_value(es8316->gpiod_spken, !(!!(data & BIT(2)) ^ es8316->hpdet_inv_flag));
+}
+
+static irqreturn_t es8316_irq_handler(int irq, void *dev_id)
+{
+	es8316_sync_spk_status((struct snd_soc_codec *)dev_id);
+	return IRQ_HANDLED;
+}
+
 static int es8316_probe(struct snd_soc_codec *codec)
 {
+	struct es8316_priv *es8316 = snd_soc_codec_get_drvdata(codec);
+	int error;
+
 	/* Reset codec and enable current state machine */
 	snd_soc_write(codec, ES8316_RESET, 0x3f);
 	usleep_range(5000, 5500);
@@ -551,11 +582,45 @@
 	 */
 	snd_soc_write(codec, ES8316_CLKMGR_ADCOSR, 0x32);
 
+	if (es8316->hp_irq && es8316->gpiod_spken) {
+		es8316_sync_spk_status(codec);
+
+		error = devm_request_threaded_irq(codec->dev, es8316->hp_irq, NULL, es8316_irq_handler,
+					 								irq_get_trigger_type(es8316->hp_irq) | IRQF_ONESHOT, 
+					 								"ES8316", codec);
+		if (error) {
+			dev_err(codec->dev, "Failed to acquire HP-DET IRQ#%u with trigType %u: %d\n", es8316->hp_irq, irq_get_trigger_type(es8316->hp_irq), error);
+			return error;
+		}
+
+		//according to my tests on Hi12, minimal debounce intervals are just fine
+		error = snd_soc_write(codec, ES8316_GPIO_DEBOUNCE, 0x02);
+		if (error) {
+			dev_err(codec->dev, "Failed to enable HP-DET interrupt: %d\n", error);
+			return error;
+		}
+	}
+
 	return 0;
 }
 
-static const struct snd_soc_codec_driver soc_codec_dev_es8316 = {
+static int es8316_remove(struct snd_soc_codec *codec)
+{
+	struct es8316_priv *es8316 = snd_soc_codec_get_drvdata(codec);
+
+	if (es8316->hp_irq && es8316->gpiod_spken) {
+		/* It is necessary to disable HP interrupt, otherwise the chip may get stuck with int pin held HI
+		 * in case HP event occur while the driver is unloaded, and so remain unhandled (no following reg read) */
+		snd_soc_write(codec, ES8316_GPIO_DEBOUNCE, 0x00);
+		devm_free_irq(codec->dev, es8316->hp_irq, codec);
+		gpiod_set_value(es8316->gpiod_spken, 0);
+	}
+	return 0;
+}
+
+static struct snd_soc_codec_driver soc_codec_dev_es8316 = {
 	.probe		= es8316_probe,
+	.remove		= es8316_remove,
 	.idle_bias_off	= true,
 
 	.component_driver = {
@@ -568,18 +633,49 @@
 	},
 };
 
+static const struct regmap_range es8316_volatile_regs_ranges[] = {
+	regmap_reg_range(ES8316_GPIO_FLAG,  ES8316_GPIO_FLAG),
+};
+static const struct regmap_access_table es8316_volatile_regs = {
+	.yes_ranges =	es8316_volatile_regs_ranges,
+	.n_yes_ranges =	ARRAY_SIZE(es8316_volatile_regs_ranges),
+};
 static const struct regmap_config es8316_regmap = {
 	.reg_bits = 8,
 	.val_bits = 8,
 	.max_register = 0x53,
 	.cache_type = REGCACHE_RBTREE,
+	.volatile_table =	&es8316_volatile_regs,
+};
+
+
+//It seems that Hi12 uses non-reference HP-det circuit, so that HPINS=1 means not inserted
+static const struct dmi_system_id hpdet_inverted_flag[] = {
+#if defined(CONFIG_DMI) && defined(CONFIG_X86)
+	{
+		.ident = "Chuwi Hi12",
+		.matches = {
+			DMI_MATCH(DMI_BOARD_VENDOR, "Hampoo"),
+			DMI_MATCH(DMI_BOARD_NAME, "Cherry Trail CR")
+		}
+	},
+#endif
+	{}
 };
 
-static int es8316_i2c_probe(struct i2c_client *i2c_client,
-			    const struct i2c_device_id *id)
+static const struct acpi_gpio_params es8316_gpio_spken = { 0, 0, false };
+static const struct acpi_gpio_params es8316_gpio_hpint = { 1, 0, false };
+static const struct acpi_gpio_mapping es8316_gpios_map[] = {
+	{ "spken-gpios", &es8316_gpio_spken, 1 },
+	{ "hpint-gpios", &es8316_gpio_hpint, 1 },
+	{ },
+};
+
+static int es8316_i2c_probe(struct i2c_client *i2c_client)
 {
 	struct es8316_priv *es8316;
 	struct regmap *regmap;
+	int error;
 
 	es8316 = devm_kzalloc(&i2c_client->dev, sizeof(struct es8316_priv),
 			      GFP_KERNEL);
@@ -592,6 +688,49 @@
 	if (IS_ERR(regmap))
 		return PTR_ERR(regmap);
 
+	if (ACPI_HANDLE(&i2c_client->dev)) {
+		error = devm_acpi_dev_add_driver_gpios(&i2c_client->dev, es8316_gpios_map);
+		if (error)
+			return error;
+	}
+
+	/* Requesting ASIS as additional safety measure, see direction checks below
+	 * As of now I have ACPI tables for only 2 devices employing this codec */
+	es8316->gpiod_spken = devm_gpiod_get_optional(&i2c_client->dev, "spken", GPIOD_ASIS);
+	if (IS_ERR(es8316->gpiod_spken)) {
+		error = PTR_ERR(es8316->gpiod_spken);
+		dev_err(&i2c_client->dev, "Failed to get SPK-EN GPIO: %d\n", error);
+		goto err_no_gpio;
+	}
+	es8316->gpiod_hpint = devm_gpiod_get_optional(&i2c_client->dev, "hpint", GPIOD_ASIS);
+	if (IS_ERR(es8316->gpiod_hpint)) {
+		error = PTR_ERR(es8316->gpiod_hpint);
+		dev_err(&i2c_client->dev, "Failed to get HP-INT GPIO: %d\n", error);
+		goto err_no_gpio;
+	}
+	if (es8316->gpiod_spken && es8316->gpiod_hpint) {
+		if(gpiod_get_direction(es8316->gpiod_spken) != 0 /*dir_out*/) {
+			dev_err(&i2c_client->dev, "SPK-EN GPIO has invalid direction\n");
+			goto err_no_gpio;
+		}
+		if(gpiod_get_direction(es8316->gpiod_hpint) != 1 /*dir_in*/) {
+			dev_err(&i2c_client->dev, "HP-INT GPIO has invalid direction\n");
+			goto err_no_gpio;
+		}
+
+		es8316->hp_irq = i2c_client->irq;
+		es8316->hpdet_inv_flag = !!dmi_check_system(hpdet_inverted_flag);
+		dev_info(&i2c_client->dev, "Successfully aquired gpios. HPIns flag inverted: %d\n", es8316->hpdet_inv_flag);
+
+		goto finalize;
+	}
+
+err_no_gpio:
+	dev_err(&i2c_client->dev, "HP-Det / spk-ctl gpios not available\n");
+	es8316->gpiod_spken = NULL;
+	es8316->gpiod_hpint = NULL;	
+
+finalize:
 	return snd_soc_register_codec(&i2c_client->dev, &soc_codec_dev_es8316,
 				      &es8316_dai, 1);
 }
@@ -626,7 +765,7 @@
 		.acpi_match_table	= ACPI_PTR(es8316_acpi_match),
 		.of_match_table		= of_match_ptr(es8316_of_match),
 	},
-	.probe		= es8316_i2c_probe,
+	.probe_new	= es8316_i2c_probe,
 	.remove		= es8316_i2c_remove,
 	.id_table	= es8316_i2c_id,
 };
